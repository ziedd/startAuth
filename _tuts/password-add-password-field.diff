diff --git a/app/DoctrineMigrations/Version20160524115250.php b/app/DoctrineMigrations/Version20160524115250.php
new file mode 100644
index 0000000..8fe0fb7
--- /dev/null
+++ b/app/DoctrineMigrations/Version20160524115250.php
@@ -0,0 +1,34 @@
+<?php
+
+namespace Application\Migrations;
+
+use Doctrine\DBAL\Migrations\AbstractMigration;
+use Doctrine\DBAL\Schema\Schema;
+
+/**
+ * Auto-generated Migration: Please modify to your needs!
+ */
+class Version20160524115250 extends AbstractMigration
+{
+    /**
+     * @param Schema $schema
+     */
+    public function up(Schema $schema)
+    {
+        // this up() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() != 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('ALTER TABLE user ADD password VARCHAR(255) NOT NULL');
+    }
+
+    /**
+     * @param Schema $schema
+     */
+    public function down(Schema $schema)
+    {
+        // this down() migration is auto-generated, please modify it to your needs
+        $this->abortIf($this->connection->getDatabasePlatform()->getName() != 'mysql', 'Migration can only be executed safely on \'mysql\'.');
+
+        $this->addSql('ALTER TABLE user DROP password');
+    }
+}
diff --git a/src/AppBundle/Entity/User.php b/src/AppBundle/Entity/User.php
index 196cf3d..cda6096 100644
--- a/src/AppBundle/Entity/User.php
+++ b/src/AppBundle/Entity/User.php
@@ -24,6 +24,13 @@ class User implements UserInterface
      */
     private $email;
 
+    /**
+     * The encoded password
+     *
+     * @ORM\Column(type="string")
+     */
+    private $password;
+
     // needed by the security system
     public function getUsername()
     {
@@ -37,7 +44,7 @@ class User implements UserInterface
 
     public function getPassword()
     {
-        // leaving blank - I don't need/have a password!
+        return $this->password;
     }
 
     public function getSalt()
@@ -59,4 +66,9 @@ class User implements UserInterface
     {
         $this->email = $email;
     }
+
+    public function setPassword($password)
+    {
+        $this->password = $password;
+    }
 }
